---
layout: post
title:      "My Favorite Road-Blocks While Building My CLI Gem"
date:       2020-04-10 01:14:12 +0000
permalink:  my_favorite_road-blocks_while_building_my_cli_gem
---


This project was by far the hardest task I have tried to complete for Flatiron School. I had the benefit of building two other CLI applications with partners while in the full-time program with peers that were much better coders than me. This time around, I was determined to complete it with no help to truly test my own knowledge and problem solving skills. Like any coding assignment or task, one is going to encounter some road-blocks or sticky errors that are typically the greatest hurdles to getting onto the next step or completing your project. For my blog, I wanted to write about my biggest hurdles to possibly help anyone else that is trying to complete this project that reads this blog and to solidify what I have learned in this process. 

My first problem, which was right off the bat and in highsight now seems silly, was not getting into the correct directory to start coding. When I tried starting and running any code, even just a (puts “Hello World”), I kept getting an error saying this directory does not exist. After doing some web searches, I felt better seeing that I was not the first person to encounter this dilemma. What was tricky and what I came to realize is that when you create a gem within the terminal using (bundle gem gem_name), the gem name and the directory to code in are named the same thing. So when you are in the terminal, it is going to look like you are in the correct directory when really you need to (cd) into the directory that is named the same thing. 

After I got that out of the way, my second hurdle was figuring out how to code with my already set up local environment as opposed to the Learn IDE. I relied heavily on the Learn instructional videos to figure out how to even get started on this project, but they all were shown starting and running the gem within the Learn’s IDE environment. I had already set up my local environment and had to sort out the differences on how to install or create a gem and get it running on my local environment. One major difference I came across was not being able to run the (./bin/console) file. I solved it by eventually taking care of the ‘TO DO’ task in the spec file and adding all of the correct dependencies such as pry. 

Another large challenge that I came across, which I had to eventually give up on and go to a plan B, just to move things along was not being able to scrape the website I wanted to because it would not fully load all of its contents. For example, it had a long list of clinics whose information I wanted to scrape but it could only fit about five clinics on the visible page and required the viewer/user to click a ‘load more’ button to see the rest of the clinics. I was able to scrape the clinics that initially loaded on the page, but could not get it to work with the rest of the clinics that needed to be loaded. I spent several hours on this and then decided to use a page that fully loads all of its content right away. 

Another concept I had to ask the web to help me solve was not realizing that some of the files were not executable. When I added a new file to the directory and tried running the program, I would continue to get the error (permission denied: bin/rake). What I learned is that you have to make these files executable manually by using the command (chmod +x bin/).  Along with this concept, I ran into another problem with these newly added files. I decided to use Git and Github to keep track of my code. I had just recently learned that VS Code, my coding editor, has source control integration with Git. As this is very useful, if you aren’t yet sure how to properly utilize it, there can be some headaches at first. What I learned is that files added to your directory will appear with a “U” next to them. This means that the file is currently untracked by Git, or in other words, has not yet been added to the repository. You can remedy this by clicking on the plus symbol right next to the filename to allow for the repository to track it. The “U” will change to an “A” which signals that it has been added to the repository.

Lastly, to wrap up the project and to make a video of the functioning CLI gem, I had decided to find and download new software to accomplish this after spending much time trying to figure out how to pause in Quicktime or the already installed video capturing software on my macOs Catalina version. Turns out, the newest versions of these applications don’t offer a pause option unfortunately. After reading others’ input on the web, I decided to download Monosnap which offered a user-friendly way to record and edit my video. Another useful feature about this software is that it allows you to directly upload the video to YouTube. 

These were my major stumbling blocks I had while completing this assignment. I learned many concepts while working on this CLI gem that have made me a stronger coder and I hope this blog helps!

